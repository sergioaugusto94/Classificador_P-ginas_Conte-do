# -*- coding: utf-8 -*-
"""tratamento_nzn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GAA8570-NvzEmZeUVrp5n6FKoqWIlzit
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler 



def tratamento(base, df_view):
  # Os inputs da função são dois dataframes, o primeiro com as caracteristicas de 
  # cada artigo e o outro df com os view de cada artigo.
  # A saída é uma array que pode ser usada de entrada no algoritmo. 

  for i in range(base.shape[0]):
      base.iloc[i, 1] = base['data_pub'][i][:10]
  base['data_pub'] = pd.to_datetime(base['data_pub'])
  

  view_data = df_view.pivot_table('audiencia', ['data_audiencia'], 'codmateria' )

  for i in view_data.columns:
      view_data[i] = view_data[i].loc[view_data.index >=
                                      base['data_pub'].loc[base['codmateria'] == i].values[0]].fillna(0)


  base = pd.merge(base, df_view.groupby('codmateria').mean(), on = 'codmateria')
  base = pd.merge(base, df_view.groupby('codmateria').std(), on = 'codmateria')

  
  base.columns = ['codmateria', 'data_pub', 'titulo', 'autor', 'tag', 
                  'publieditorial','possuilinkafiliacao', 'media', 
                  'std']

  visitas_sts = view_data.count(axis = 0) 
  visitas_sts.columns = ['Total']

  cols = base.columns.values[7:9] 

  for j in range(len(cols)):
      low = []
      for i in view_data.columns.values:
          z = view_data[i][view_data[i] < 
                          base[cols[j]].loc[base['codmateria'] == i].values[0]].count()
          low.append(z)
                
      low = pd.DataFrame(low, columns = ['cnt_'+cols[j]])
      visitas_sts = pd.concat([visitas_sts, low.set_index(visitas_sts.index)], 
                              axis = 1)
      visitas_sts['razao_'+cols[j]] = visitas_sts['cnt_' + 
                                                  cols[j]]/visitas_sts.iloc[:, 0]
  visitas_sts = visitas_sts.rename(columns={0: 'cnt_total'})

  base = pd.concat([base, visitas_sts.set_index(base.index)], axis = 1)

  colunas_importantes = ['media', 'std',  'cnt_media', 'razao_media']

  inputs = base[colunas_importantes].values

  scaler_data = StandardScaler()
  inputs[:, 0:3] = scaler_data.fit_transform(inputs[:, 0:3])
  
  return inputs